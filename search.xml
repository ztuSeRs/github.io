<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2024/10/23/music/"/>
      <url>/2024/10/23/music/</url>
      
        <content type="html"><![CDATA[<script>console.error("Error: [hexo-tag-aplayer] Specified asset file not found (歌手)");</script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hook</title>
      <link href="/2024/10/22/hook/"/>
      <url>/2024/10/22/hook/</url>
      
        <content type="html"><![CDATA[<p>第一次hook成功有点兴奋所以写一篇总结：</p><h2 id="1whatishook"><a href="#1whatishook" class="headerlink" title="1whatishook"></a>1whatishook</h2><p>xposed是一款可以在不修改APK的情况下景程序运行的框架，基于它可以制作出许多功能强大的模块，且在功能不,冲突的情况下同时运作。在这个框架下，我们可以编写并</p><p>加载自己编写的插件APP，实现对目标apk的注入拦载等。</p><p>假如签名校验无法绕过，则可利用xposed或frida去hook</p><p>原理</p><p>用自己实现的app_process普换掉了系统原本提供的app_process，加载一个额外的jar包，入口从原来的:com.android.internal.0sygoteInit.main(O)被替换成了:</p><p>de.robvandroid.xposed.XposedBridge.main(),</p><p>创建的Zygote进程就变成Hook的zygote进程了，从而完成对zygote进程及其创建的Dalvik&#x2F;ART虚拟机的劫持(zytoge注入)</p><h2 id="2开始配置xposed："><a href="#2开始配置xposed：" class="headerlink" title="2开始配置xposed："></a>2开始配置xposed：</h2><p>.Android Studio创建新项目</p><p>2.将下载的xposedBridgeApi.jar包拖进libs文件夹</p><p>3.右击jar包，选择add as library</p><p>4.修改xml文件配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 复制代码 隐藏代码</span><br><span class="line"><span class="comment">&lt;!-- 是否是xposed模块，xposed根据这个来判断是否是模块 --&gt;</span>&lt;meta-dataandroid:name=&quot;xposedmodule&quot;android:value=&quot;true&quot; /&gt;<span class="comment">&lt;!-- 模块描述，显示在xposed模块列表那里第二行 --&gt;</span>&lt;meta-dataandroid:name=&quot;xposeddescription&quot;android:value=&quot;这是一个Xposed模块&quot; /&gt;<span class="comment">&lt;!-- 最低xposed版本号(lib文件名可知) --&gt;</span>&lt;meta-dataandroid:name=&quot;xposedminversion&quot;android:value=&quot;89&quot; /&gt;</span><br></pre></td></tr></table></figure><p>5.修改build.gradle,将此处修改为compileOnly 默认的是implementation</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> 复制代码 隐藏代码</span><br><span class="line"><span class="keyword">implementation</span> 使用该方式依赖的库将会参与编译和打包</span><br><span class="line">compileOnly 只在编译时有效，不会参与打包</span><br></pre></td></tr></table></figure><p>6.新建–&gt;Folder–&gt;Assets Folder，创建xposed_init(不要后缀名):只有一行代码，就是说明入口类</p><p>记得详细到类名（第一次就是没详细到类名出现问题耗了半天）</p><p>7.新建Hook类，实现IXposedHookLoadPackage接口，然后在handleLoadPackage函数内编写Hook逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> 复制代码 隐藏代码</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage; </span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hook</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;<span class="meta">@Overridepublic</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam loadPackageParam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承了IXposedHookLoadPackag便拥有了hook的能力</p><h2 id="3如何去实际hook"><a href="#3如何去实际hook" class="headerlink" title="3如何去实际hook"></a>3如何去实际hook</h2><p>首先连接到模拟机：我这个as直接给我连接到了有点nb平常应该是需要用adb来连接</p><p>前面都配置完之后写Hook的逻辑之后先启动钩子在启动程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package com.example.myapplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line">//前面都是声明<span class="keyword">as</span>会给你补齐</span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">Hook</span> implements IXposedHookLoadPackage &#123;</span><br><span class="line">    private static final String TAG = <span class="string">&quot;XposedHook&quot;</span>;//添加了XposedHook这个标签为了好调试</span><br><span class="line"></span><br><span class="line"><span class="meta">    @Override</span></span><br><span class="line">    public void handleLoadPackage(XC_LoadPackage.LoadPackageParam loadPackageParam) throws Throwable &#123;</span><br><span class="line">        //包含了关于正在加载的应用包的信息;throws是抛出异常</span><br><span class="line">        <span class="keyword">if</span> (!loadPackageParam.packageName.equals(<span class="string">&quot;com.example.test&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;//判断是否是com.example.test（也就是筛选出需要hook的包名）</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            XposedHelpers.findAndHookMethod(<span class="string">&quot;com.example.test.MainActivity&quot;</span>, loadPackageParam.classLoader, <span class="string">&quot;check&quot;</span>, String.<span class="keyword">class</span>, new XC_MethodHook() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">                @Override</span></span><br><span class="line">                protected void beforeHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                    <span class="built_in">super</span>.beforeHookedMethod(param);</span><br><span class="line">                    String <span class="built_in">str</span> = (String) param.args[<span class="number">0</span>];</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;MainActivity.check 被调用: str=&quot;</span> + <span class="built_in">str</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">                @Override</span></span><br><span class="line">                protected void afterHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                    <span class="built_in">super</span>.afterHookedMethod(param);</span><br><span class="line">                    param.setResult(<span class="number">1</span>);</span><br><span class="line">                    <span class="built_in">int</span> result = (<span class="built_in">int</span>) param.getResult();</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;MainActivity.check 结果=&quot;</span> + result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);//这段代码使用了 Xposed 框架中的 XposedHelpers.findAndHookMethod 方法，主要用于在指定类的方法调用时插入自定义逻辑。具体来看，代码的各个部分的意义如下：</span><br><span class="line"></span><br><span class="line">           // <span class="string">&quot;com.example.test.MainActivity&quot;</span>：这是你要拦截的目标类的全名。在这里，MainActivity 是该应用的一个</span><br><span class="line">            //Activity。</span><br><span class="line"></span><br><span class="line">            //loadPackageParam.classLoader：这是加载该应用的类加载器，确保可以找到并操作目标类。</span><br><span class="line"></span><br><span class="line">            //<span class="string">&quot;check&quot;</span>：这是要拦截的方法名称。在这个例子中，是 MainActivity 类中的 check 方法。</span><br><span class="line"></span><br><span class="line">            //String.<span class="keyword">class</span>：这是方法参数的类型。在这个例子中，check 方法接受一个 String 类型的参数。</span><br><span class="line"></span><br><span class="line">            //new XC_MethodHook() &#123; ... &#125;：这是一个匿名类，用于定义你希望在 check 方法调用时执行的逻辑。这个类可以重写以下两个方法：</span><br><span class="line"></span><br><span class="line">            //beforeHookedMethod：在目标方法被调用之前执行的代码。</span><br><span class="line">            //afterHookedMethod：在目标方法被调用之后执行的代码。</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;钩子方法时出错&quot;</span>, e);//检测钩子方法是否出错</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中具体的模板是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package com.example.myapplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line">//前面都是声明<span class="keyword">as</span>会给你补齐</span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">Hook</span> implements IXposedHookLoadPackage &#123;</span><br><span class="line">    private static final String TAG = <span class="string">&quot;XposedHook&quot;</span>;//添加了XposedHook这个标签为了好调试</span><br><span class="line"></span><br><span class="line"><span class="meta">    @Override</span></span><br><span class="line">    public void handleLoadPackage(XC_LoadPackage.LoadPackageParam loadPackageParam) throws Throwable &#123;</span><br><span class="line">        //包含了关于正在加载的应用包的信息;throws是抛出异常</span><br><span class="line">        <span class="keyword">if</span> (!loadPackageParam.packageName.equals(<span class="string">&quot;com.example.test&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;//判断是否是com.example.test（也就是筛选出需要hook的包名）</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            XposedHelpers.findAndHookMethod(<span class="string">&quot;com.example.test.MainActivity&quot;</span>, loadPackageParam.classLoader, <span class="string">&quot;check&quot;</span>, String.<span class="keyword">class</span>, new XC_MethodHook() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">                @Override</span></span><br><span class="line">                protected void beforeHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">                @Override</span></span><br><span class="line">                protected void afterHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;钩子方法时出错&quot;</span>, e);//检测钩子方法是否出错</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是xposed的hook方法</p><h2 id="题目：-shctf-cancanneed"><a href="#题目：-shctf-cancanneed" class="headerlink" title="题目：[shctf] cancanneed"></a>题目：[shctf] cancanneed</h2><p>打开jadx查看代码</p><p><img src="https://m0641c309il.feishu.cn/space/api/box/stream/download/asynccode/?code=ZGQ5ZDg1NTJmYzEzMjEzNmM3MDA3N2IzODZhYmNhZDVfanpxQzcweWxiUmVnTmM3SjN0a0MydTZSc3hVUTdKWUJfVG9rZW46UHhIVWJvb1M0b3dOOEh4WFJURmNaM0dEbnRoXzE3Mjk1ODY2NTU6MTcyOTU5MDI1NV9WNA" alt="img"></p><p>所以只要给他hook了就好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package com.example.myapplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XC_MethodHook;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line">//前面都是声明<span class="keyword">as</span>会给你补齐</span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">Hook</span> implements IXposedHookLoadPackage &#123;</span><br><span class="line">    private static final String TAG = <span class="string">&quot;XposedHook&quot;</span>;//添加了XposedHook这个标签为了好调试</span><br><span class="line"></span><br><span class="line"><span class="meta">    @Override</span></span><br><span class="line">    public void handleLoadPackage(XC_LoadPackage.LoadPackageParam loadPackageParam) throws Throwable &#123;</span><br><span class="line">        //包含了关于正在加载的应用包的信息;throws是抛出异常</span><br><span class="line">        <span class="keyword">if</span> (!loadPackageParam.packageName.equals(<span class="string">&quot;com.example.test&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;//判断是否是com.example.test（也就是筛选出需要hook的包名）</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            XposedHelpers.findAndHookMethod(<span class="string">&quot;com.example.test.MainActivity&quot;</span>, loadPackageParam.classLoader, <span class="string">&quot;check&quot;</span>, String.<span class="keyword">class</span>, new XC_MethodHook() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">                @Override</span></span><br><span class="line">                protected void beforeHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                    <span class="built_in">super</span>.beforeHookedMethod(param);</span><br><span class="line">                    String <span class="built_in">str</span> = (String) param.args[<span class="number">0</span>];</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;MainActivity.check 被调用: str=&quot;</span> + <span class="built_in">str</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">                @Override</span></span><br><span class="line">                protected void afterHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                    <span class="built_in">super</span>.afterHookedMethod(param);</span><br><span class="line">                    param.setResult(<span class="number">1</span>);</span><br><span class="line">                    <span class="built_in">int</span> result = (<span class="built_in">int</span>) param.getResult();</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;MainActivity.check 结果=&quot;</span> + result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);//这段代码使用了 Xposed 框架中的 XposedHelpers.findAndHookMethod 方法，主要用于在指定类的方法调用时插入自定义逻辑。具体来看，代码的各个部分的意义如下：</span><br><span class="line"></span><br><span class="line">           // <span class="string">&quot;com.example.test.MainActivity&quot;</span>：这是你要拦截的目标类的全名。在这里，MainActivity 是该应用的一个</span><br><span class="line">            //Activity。</span><br><span class="line"></span><br><span class="line">            //loadPackageParam.classLoader：这是加载该应用的类加载器，确保可以找到并操作目标类。</span><br><span class="line"></span><br><span class="line">            //<span class="string">&quot;check&quot;</span>：这是要拦截的方法名称。在这个例子中，是 MainActivity 类中的 check 方法。</span><br><span class="line"></span><br><span class="line">            //String.<span class="keyword">class</span>：这是方法参数的类型。在这个例子中，check 方法接受一个 String 类型的参数。</span><br><span class="line"></span><br><span class="line">            //new XC_MethodHook() &#123; ... &#125;：这是一个匿名类，用于定义你希望在 check 方法调用时执行的逻辑。这个类可以重写以下两个方法：</span><br><span class="line"></span><br><span class="line">            //beforeHookedMethod：在目标方法被调用之前执行的代码。</span><br><span class="line">            //afterHookedMethod：在目标方法被调用之后执行的代码。</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;钩子方法时出错&quot;</span>, e);//检测钩子方法是否出错</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是hook的脚本和解释：</p><p><img src="https://m0641c309il.feishu.cn/space/api/box/stream/download/asynccode/?code=MTkxZWRjMmQ1MjAzNWRjMjQzN2VkMTc4NmE2MzAwODNfSExKclRZUm5xdndYYm1sMkM1QkV0ZkR4UGJsSVBRbmhfVG9rZW46T3ZBc2JYWFlub2JzR3N4VGMyZGNIMks0bnJkXzE3Mjk1ODY2NTU6MTcyOTU5MDI1NV9WNA" alt="img"></p><p>运行hook</p><p>在LSPosed中打开hook框架</p><p><img src="https://m0641c309il.feishu.cn/space/api/box/stream/download/asynccode/?code=MjhlNWMyYjU0ZmQ0OTA1YTVlNzQ5YzNiNDU2MTVkOTZfOE5KNENubWVBU0xXYzVBR1FpWjVsVXRoN3lhMlBBZk5fVG9rZW46Qm5zWmJqVTVKb0dNaTF4cFprSGNRZWZabkhlXzE3Mjk1ODY2NTU6MTcyOTU5MDI1NV9WNA" alt="img"></p><p>随便输入点东西之后点确定就有flag了：</p><p><img src="https://m0641c309il.feishu.cn/space/api/box/stream/download/asynccode/?code=Yzk4YWI1MDg3ZmJlYTcwMjljNGY4OGI0NmNiMzkxNTBfem45bjhBWGI4anFHNW95VVQwQ3lZazJOOENhR0NrenZfVG9rZW46SmN1WmJEV2FpbzJGeVl4cVk4dWNOTTQxbk1oXzE3Mjk1ODY2NTU6MTcyOTU5MDI1NV9WNA" alt="img"></p><p>对于需要hook的题目总结：</p><p>具体分析函数有自解的可以用hook解决</p><p>函数非常复杂的有可能需要使用hook来解决</p><p>其他的之后再解决</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2024/10/19/%E6%B5%8B%E8%AF%95/"/>
      <url>/2024/10/19/%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>这是一个测试，测试</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
